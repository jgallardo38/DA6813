"0",""
"0",""
"0","##OPTIMAL CUTOFF FOR BEST SENSITIVITY and specificity"
"0","#create Prediction Indicators for y"
"0","df_test$Pred_Y_best <- ifelse(df_test$PredProb >= 0.46, 1, 0)"
"0","caret::confusionMatrix(as.factor(df_test$y_int),as.factor(df_test$Pred_Y_best), positive = '1') #this function and package auto computes a lot of the metrics"
"1","Confusion Matrix and Statistics

"
"1","          Reference
"
"1","Prediction"
"1","  0"
"1","  1"
"1","
         0"
"1"," 69"
"1"," 19"
"1","
         1"
"1"," 30"
"1"," 63"
"1","
"
"1",""
"1","                         "
"1","                 "
"1","
"
"1","               Accuracy :"
"1"," 0.7293          "
"1","
"
"1","                 95% CI :"
"1"," (0.6584, 0.7925)"
"1","
"
"1","    No Information Rate :"
"1"," 0.547           "
"1","
"
"1","    P-Value [Acc > NIR] :"
"1"," 3.447e-07       "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","                  Kappa :"
"1"," 0.46            "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1"," Mcnemar's Test P-Value :"
"1"," 0.1531          "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","            Sensitivity :"
"1"," 0.7683          "
"1","
"
"1","            Specificity :"
"1"," 0.6970          "
"1","
"
"1","         Pos Pred Value :"
"1"," 0.6774          "
"1","
"
"1","         Neg Pred Value :"
"1"," 0.7841          "
"1","
"
"1","             Prevalence :"
"1"," 0.4530          "
"1","
"
"1","         Detection Rate :"
"1"," 0.3481          "
"1","
"
"1","   Detection Prevalence :"
"1"," 0.5138          "
"1","
"
"1","      Balanced Accuracy :"
"1"," 0.7326          "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","       'Positive' Class :"
"1"," 1               "
"1","
"
"1","                         "
"1","                 "
"1","
"
"0","# accuracy: 73%"
"0","# sens: 77%"
"0","# Spec: 70%"
